predicate isDimensional(string fullyQualifiedName) {
  fullyQualifiedName in [
      "org.apache.cassandra.cql3.statements.SelectStatement.process",
      "org.apache.cassandra.transport.Server$ConnectionTracker.send",
      "org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer.serializedSize",
      "org.apache.cassandra.utils.concurrent.Ref$GlobalState.release",
      "org.apache.cassandra.db.partitions.UnfilteredPartitionIterators$Serializer.serialize",
      "org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer.deserialize",
      "org.apache.cassandra.io.sstable.metadata.CompactionMetadata$CompactionMetadataSerializer.serialize",
      "org.apache.cassandra.cache.ConcurrentLinkedHashCache.remove",
      "org.apache.cassandra.cache.ConcurrentLinkedHashCache.put",
      "org.apache.cassandra.db.transform.BasePartitions.hasNext",
      "org.apache.cassandra.io.sstable.format.SSTableReader.getApproximateKeyCount",
      "org.apache.cassandra.db.compaction.CompactionManager$BackgroundCompactionCandidate.run",
      "org.apache.cassandra.io.util.Memory.checkBounds",
      "org.apache.cassandra.db.SizeEstimatesRecorder.run",
      "org.apache.cassandra.db.rows.RowIterators.digest",
      "org.apache.cassandra.concurrent.SEPWorker.run",
      "org.apache.cassandra.config.Schema.getKeyspaceInstance",
      "org.apache.cassandra.service.StorageService.getPrimaryRangesForEndpoint",
      "org.apache.cassandra.concurrent.AbstractLocalAwareExecutorService$FutureTask.run",
      "org.apache.cassandra.io.sstable.SSTableRewriter.append",
      "org.apache.cassandra.metrics.CompactionMetrics$1.getValue",
      "org.apache.cassandra.db.ColumnFamilyStore.all",
      "org.apache.cassandra.db.ColumnFamilyStore$2.run",
      "org.apache.cassandra.locator.DynamicEndpointSnitch.updateScores",
      "org.apache.cassandra.concurrent.SEPWorker.doWaitSpin",
      "org.apache.cassandra.concurrent.SEPWorker.selfAssign",
      "org.apache.cassandra.io.util.RebufferingInputStream.read",
      "org.apache.cassandra.gms.GossipDigestSynVerbHandler.doSort",
      "org.apache.cassandra.gms.EndpointStateSerializer.deserialize",
      "org.apache.cassandra.gms.Gossiper.sendGossip", "org.apache.cassandra.gms.ArrivalWindow.add",
      "org.apache.cassandra.net.MessagingService.setVersion",
      "org.apache.cassandra.gms.Gossiper.applyNewStates",
      "org.apache.cassandra.gms.GossipDigestSerializationHelper.deserialize",
      "org.apache.cassandra.utils.SortedBiMultiValMap.create",
      "org.apache.cassandra.gms.EndpointStateSerializer.serialize",
      "org.apache.cassandra.gms.Gossiper.makeRandomGossipDigest",
      "org.apache.cassandra.gms.Gossiper.getStateForVersionBiggerThan",
      "org.apache.cassandra.net.MessagingService.getVersion",
      "org.apache.cassandra.locator.TokenMetadata.getPrimaryRangesFor",
      "org.apache.cassandra.gms.GossipDigestAck2Serializer.deserialize",
      "org.apache.cassandra.net.MessagingService.getConnectionPool",
      "org.apache.cassandra.gms.GossipDigestSerializationHelper.serialize",
      "org.apache.cassandra.gms.GossipDigestSerializationHelper.serializedSize",
      "org.apache.cassandra.gms.GossipDigestAck2Serializer.serialize",
      "org.apache.cassandra.gms.GossipDigestAckSerializer.serialize",
      "org.apache.cassandra.locator.TokenMetadata.updateHostId",
      "org.apache.cassandra.gms.Gossiper.examineGossiper",
      "org.apache.cassandra.gms.Gossiper.notifyFailureDetector",
      "org.apache.cassandra.locator.AbstractReplicationStrategy.getAddressRanges",
      "org.apache.cassandra.gms.GossipDigestAckSerializer.serializedSize",
      "org.apache.cassandra.gms.EndpointStateSerializer.serializedSize",
      "org.apache.cassandra.gms.GossipDigestAckVerbHandler.doVerb",
      "org.apache.cassandra.gms.GossipDigestAck2Serializer.serializedSize",
      "org.apache.cassandra.gms.Gossiper.getMaxEndpointStateVersion",
      "org.apache.cassandra.gms.GossipDigestAckSerializer.deserialize",
      "org.apache.cassandra.locator.TokenMetadata.cloneOnlyTokenMap",
      "org.apache.cassandra.locator.SimpleStrategy.calculateNaturalEndpoints",
      "org.apache.cassandra.locator.TokenMetadata.getAllEndpoints",
      "org.apache.cassandra.db.ClusteringComparator.compare",
      "org.apache.cassandra.db.SystemKeyspace.tokensAsSet",
      "org.apache.cassandra.db.TypeSizes.encodedUTF8Length",
      "org.apache.cassandra.locator.TokenMetadata.calculatePendingRanges",
      "org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeUTF",
      "org.apache.cassandra.db.compaction.CompactionManager.submitBackground",
      "org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getNextBackgroundSSTables",
      "org.apache.cassandra.cql3.QueryProcessor.makeInternalOptions",
      "org.apache.cassandra.db.ColumnFamilyStore$4.call",
      "org.apache.cassandra.db.Keyspace.snapshot",
      "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramBuilder.flushHistogram",
      "org.apache.cassandra.utils.StreamingHistogram$StreamingHistogramSerializer.serialize",
      "org.apache.cassandra.metrics.RestorableMeter.tickIfNecessary",
      "org.apache.cassandra.db.Keyspace.snapshotExists",
      "org.apache.cassandra.cache.ConcurrentLinkedHashCache.get",
      "org.apache.cassandra.db.SizeEstimatesRecorder.recordSizeEstimates",
      "org.apache.cassandra.db.ColumnIndex$Builder.build",
      "org.apache.cassandra.db.rows.CellPath.dataSize",
      "org.apache.cassandra.utils.btree.TreeBuilder.build",
      "org.apache.cassandra.utils.BiMultiValMap.removeValue",
      "org.apache.cassandra.serializers.SetSerializer.deserializeForNativeProtocol",
      "org.apache.cassandra.locator.TokenMetadata.updateNormalTokens",
      "org.apache.cassandra.locator.TokenMetadata.addBootstrapTokens",
      "org.apache.cassandra.db.rows.Cells.reconcile",
      "org.apache.cassandra.serializers.CollectionSerializer.pack",
      "org.apache.cassandra.service.StorageService.handleStateNormal",
      "org.apache.cassandra.db.rows.UnfilteredSerializer.writeComplexColumn",
      "org.apache.cassandra.gms.TokenSerializer.deserialize",
      "org.apache.cassandra.db.rows.Rows.collectStats",
      "org.apache.cassandra.utils.btree.BTree$Builder.resolve",
      "org.apache.cassandra.db.rows.BTreeRow$Builder$CellResolver.resolve",
      "org.apache.cassandra.cql3.Sets$Value.fromSerialized",
      "org.apache.cassandra.db.rows.UnfilteredSerializer.sizeOfComplexColumn",
      "org.apache.cassandra.db.rows.Cells.reconcileComplex",
      "org.apache.cassandra.db.rows.ComplexColumnData.dataSize",
      "org.apache.cassandra.serializers.SetSerializer.serializeValues",
      "org.apache.cassandra.db.rows.ComplexColumnData.unsharedHeapSizeExcludingData",
      "org.apache.cassandra.utils.BiMultiValMap.putAll",
      "org.apache.cassandra.db.rows.BufferCell$Serializer.serializedSize",
      "org.apache.cassandra.db.rows.BufferCell$Serializer.serialize",
      "org.apache.cassandra.db.rows.BTreeRow$Builder.addCell",
      "org.apache.cassandra.utils.btree.BTree$Builder.sort",
      "org.apache.cassandra.utils.FastByteOperations$UnsafeOperations.compareTo",
      "org.apache.cassandra.db.marshal.TimeUUIDType.compareCustom",
      "org.apache.cassandra.utils.UUIDGen.createTimeUUIDBytes",
      "org.apache.cassandra.cql3.ColumnIdentifier.prefixComparison",
      "org.apache.cassandra.schema.CompactionParams.equals",
      "org.apache.cassandra.schema.CompressionParams.copyOptions",
      "org.apache.cassandra.config.CFMetaData.create",
      "org.apache.cassandra.schema.CachingParams.fromMap",
      "org.apache.cassandra.config.ColumnDefinition.comparisonOrder",
      "org.apache.cassandra.db.ClusteringPrefix$Deserializer.skipNext",
      "org.apache.cassandra.db.ClusteringPrefix$Deserializer.prepare",
      "org.apache.cassandra.schema.Tables.diff",
      "org.apache.cassandra.schema.SchemaKeyspace.fetchTables",
      "org.apache.cassandra.schema.CompressionParams.validate",
      "org.apache.cassandra.cql3.statements.SelectStatement.getSliceCommands",
      "org.apache.cassandra.db.marshal.MapType.getInstance",
      "org.apache.cassandra.schema.KeyspaceMetadata.existingIndexNames",
      "org.apache.cassandra.db.transform.BasePartitions.runOnClose",
      "org.apache.cassandra.db.marshal.SetType.getInstance",
      "org.apache.cassandra.cql3.ColumnIdentifier.getInterned",
      "org.apache.cassandra.db.ClusteringPrefix$Deserializer.compareNextTo",
      "org.apache.cassandra.schema.TableParams$Builder.extensions",
      "org.apache.cassandra.schema.CompactionParams.classFromName",
      "org.apache.cassandra.schema.CQLTypeParser.parse",
      "org.apache.cassandra.schema.CompactionParams.create",
      "org.apache.cassandra.serializers.MapSerializer.deserializeForNativeProtocol",
      "org.apache.cassandra.db.SinglePartitionReadCommand$Group.executeInternal",
      "org.apache.cassandra.db.rows.AbstractRow.digest",
      "org.apache.cassandra.db.rows.UnfilteredSerializer.serialize",
      "org.apache.cassandra.db.ColumnFamilyStore.forceFlush",
      "org.apache.cassandra.db.ColumnFamilyStore.snapshotWithoutFlush",
      "org.apache.cassandra.db.Directories.snapshotExists",
      "org.apache.cassandra.db.transform.BaseRows.hasNext",
      "org.apache.cassandra.db.ColumnIndex$Builder.add",
      "org.apache.cassandra.service.StorageService.forceKeyspaceCompaction",
      "org.apache.cassandra.db.Keyspace.getValidColumnFamilies"
    ]
}
